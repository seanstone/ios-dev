#!/usr/bin/env bash
set -euo pipefail

# --- Config / defaults ---
SDK="${IOS_SDK:-$(xcrun --sdk iphoneos --show-sdk-path)}"
CCBIN="${CCBIN:-clang}"
DYLIB_NAME="${DYLIB_NAME:-a.out.dylib}"   # used for install_name only

# Generic iOS "unavailable" shims (optional)
IOS_SHIMS_ENABLE="${IOS_SHIMS_ENABLE:-1}"     # set to 1 to activate shims
IOS_SHIMS_DIR="${IOS_SHIMS_DIR:-}"            # folder containing ios_unavailable_shims.{h,c}

# Codesign controls
CODESIGN_ALLOWED="${CODESIGN_ALLOWED:-YES}"
ADHOC="${ADHOC:-0}"
CODESIGN_FLAGS="${CODESIGN_FLAGS:---timestamp=none --preserve-metadata=identifier,flags}"
ENTITLEMENTS="${ENTITLEMENTS:-}"

# Simulator vs Device detection
if [[ "${SDK}" == *"iPhoneSimulator"* ]] || [[ "${SDK}" == *"iphonesimulator"* ]]; then
  IS_SIM=1
else
  IS_SIM=0
fi

# --- Parse args: detect compile vs link; capture -o output ---
is_compile=0
out_file=""
prev=""
for a in "$@"; do
  [[ "$a" == "-c" ]] && is_compile=1
  [[ "$prev" == "-o" ]] && out_file="$a"
  prev="$a"
done

# --- Base compile flags ---
BASE_CFLAGS=( -target arm64-apple-ios -isysroot "$SDK" -fPIC )

# Optional: force-include shims header on compile steps
if (( IOS_SHIMS_ENABLE )) && [[ -n "${IOS_SHIMS_DIR}" ]]; then
  BASE_CFLAGS+=( -include "${IOS_SHIMS_DIR}/ios_unavailable_shims.h" )
fi

# Build ARGS from base flags + caller args
ARGS=( "${BASE_CFLAGS[@]}" "$@" )

if (( is_compile )); then
  exec "$CCBIN" "${ARGS[@]}"
fi

# --- Link step: ALWAYS produce a dylib ---
# Remove conflicting kind flags if caller added them (e.g., -bundle)
FILTERED_ARGS=()
skip_next=0
prev=""
for a in "$@"; do
  if (( skip_next )); then
    skip_next=0
    prev="$a"
    continue
  fi
  case "$a" in
    -bundle)        ;;                         # drop
    -shared)        ;;                         # drop (clang accepts -shared, but we force -dynamiclib)
    -Wl,-pie|-pie)  ;;                         # drop (not for dylibs)
    *) FILTERED_ARGS+=( "$a" );;
  esac
  prev="$a"
done
ARGS=( "${BASE_CFLAGS[@]}" "${FILTERED_ARGS[@]}" )

# Add dylib flags; avoid duplicate -install_name if caller set it
saw_install_name=0
prev=""
for a in "${FILTERED_ARGS[@]}"; do
  [[ "$a" == "-install_name" ]] && saw_install_name=1
done

declare -a LINK_FLAGS=()
LINK_FLAGS+=( -dynamiclib )
if (( ! saw_install_name )); then
  LINK_FLAGS+=( -install_name "@rpath/${DYLIB_NAME}" )
fi
LINK_FLAGS+=( -current_version 1.0 -compatibility_version 1.0 )

# If shims are enabled, compile the shim C once to a temp .o and inject it
TMPDIR="${TMPDIR:-/tmp}"
SHIM_OBJ=""
if (( IOS_SHIMS_ENABLE )) && [[ -n "${IOS_SHIMS_DIR}" ]]; then
  SHIM_C="${IOS_SHIMS_DIR}/ios_unavailable_shims.c"
  SHIM_H="${IOS_SHIMS_DIR}/ios_unavailable_shims.h"
  if [[ -f "$SHIM_C" && -f "$SHIM_H" ]]; then
    SHIM_OBJ="${TMPDIR%/}/ios_unavailable_shims.o"
    if [[ ! -f "$SHIM_OBJ" || "$SHIM_C" -nt "$SHIM_OBJ" || "$SHIM_H" -nt "$SHIM_OBJ" ]]; then
      "$CCBIN" -target arm64-apple-ios -isysroot "$SDK" -fPIC -c "$SHIM_C" -o "$SHIM_OBJ"
    fi
  fi
fi

# Perform the link (include shim object if present)
if [[ -n "$SHIM_OBJ" && -f "$SHIM_OBJ" ]]; then
  "$CCBIN" "${ARGS[@]}" "${LINK_FLAGS[@]}" "$SHIM_OBJ"
else
  "$CCBIN" "${ARGS[@]}" "${LINK_FLAGS[@]}"
fi

# --- Post-link codesign (when we know the output path) ---
if [[ "${CODESIGN_ALLOWED}" == "YES" ]] && [[ -n "${out_file}" ]]; then
  if [[ -n "${CODESIGN_IDENTITY:-}" ]]; then
    /usr/bin/codesign --force --sign "${CODESIGN_IDENTITY}" ${CODESIGN_FLAGS} \
      ${ENTITLEMENTS:+--entitlements "$ENTITLEMENTS"} \
      "$out_file"
  else
    if (( IS_SIM )) || (( ADHOC )); then
      /usr/bin/codesign --force --sign - ${CODESIGN_FLAGS} \
        ${ENTITLEMENTS:+--entitlements "$ENTITLEMENTS"} \
        "$out_file"
    else
      echo "⚠️  Skipping codesign: no CODESIGN_IDENTITY and not Simulator (set ADHOC=1 to force)."
    fi
  fi
else
  [[ -z "${out_file}" ]] && echo "⚠️  Skipping codesign: could not detect output file (-o missing)."
  [[ "${CODESIGN_ALLOWED}" != "YES" ]] && echo "ℹ️  Codesign disabled (CODESIGN_ALLOWED=${CODESIGN_ALLOWED})."
fi
