#!/usr/bin/env bash
set -euo pipefail

# --- Config / defaults ---
SDK="${IOS_SDK:-$(xcrun --sdk iphoneos --show-sdk-path)}"
CCBIN="${CCBIN:-clang}"
DYLIB_NAME="${DYLIB_NAME:-a.out.dylib}"

# Codesign controls (env):
#   CODESIGN_IDENTITY : explicit identity (e.g. "Apple Development: Name (TEAMID)")
#   CODESIGN_ALLOWED  : YES/NO (default YES)
#   ADHOC             : 1 to use ad-hoc (-s -) if no identity (useful for Simulator)
#   CODESIGN_FLAGS    : extra flags (e.g. "--options runtime")
#   ENTITLEMENTS      : path to an entitlements file (rare for dylibs; usually omit)
CODESIGN_ALLOWED="${CODESIGN_ALLOWED:-YES}"
ADHOC="${ADHOC:-0}"
CODESIGN_FLAGS="${CODESIGN_FLAGS:---timestamp=none --preserve-metadata=identifier,flags}"

# Detect Simulator vs Device from SDK path (affects default to ad-hoc for Simulator)
if [[ "${SDK}" == *"iPhoneSimulator"* ]] || [[ "${SDK}" == *"iphonesimulator"* ]]; then
  IS_SIM=1
else
  IS_SIM=0
fi

# --- Separate compile vs link, track output path ---
is_compile=0
out_file=""
prev=""
for a in "$@"; do
  if [[ "$a" == "-c" ]]; then is_compile=1; fi
  if [[ "$prev" == "-o" ]]; then out_file="$a"; fi
  prev="$a"
done

# If linking and caller didn't give -o, we'll not guess; let clang decide.
# (Most build systems pass -o; if not, codesigning will skip because no output path.)

BASE_CFLAGS=( -target arm64-apple-ios -isysroot "$SDK" -fPIC )
ARGS=( "${BASE_CFLAGS[@]}" "$@" )

if (( is_compile )); then
  exec "$CCBIN" "${ARGS[@]}"
fi

# --- LINK step: force a dylib and sensible install_name ---
# If the caller already passed -dynamiclib/-install_name, we won't duplicate them.
need_dynamiclib=1
need_install_name=1
for a in "$@"; do
  [[ "$a" == "-dynamiclib" ]]     && need_dynamiclib=0
  [[ "$a" == "-install_name" ]]   && need_install_name=0
done

LINK_FLAGS=()
(( need_dynamiclib ))   && LINK_FLAGS+=( -dynamiclib )
(( need_install_name )) && LINK_FLAGS+=( -install_name "@rpath/${DYLIB_NAME}" )
LINK_FLAGS+=( -current_version 1.0 -compatibility_version 1.0 )

# Perform the link
"$CCBIN" "${ARGS[@]}" "${LINK_FLAGS[@]}"

# --- Post-link codesign (only if allowed and we know the output path) ---
if [[ "${CODESIGN_ALLOWED}" == "YES" ]] && [[ -n "${out_file}" ]]; then
  if [[ -n "${CODESIGN_IDENTITY:-}" ]]; then
    /usr/bin/codesign --force --sign "${CODESIGN_IDENTITY}" ${CODESIGN_FLAGS} \
      ${ENTITLEMENTS:+--entitlements "$ENTITLEMENTS"} \
      "$out_file"
  else
    # Default to ad-hoc on Simulator if no identity; otherwise sign only if ADHOC=1
    if (( IS_SIM )) || (( ADHOC )); then
      /usr/bin/codesign --force --sign - ${CODESIGN_FLAGS} \
        ${ENTITLEMENTS:+--entitlements "$ENTITLEMENTS"} \
        "$out_file"
    else
      echo "⚠️  Skipping codesign: no CODESIGN_IDENTITY and not Simulator (set ADHOC=1 to force)."
    fi
  fi
else
  [[ -z "${out_file}" ]] && echo "⚠️  Skipping codesign: could not detect output file (-o missing)."
  [[ "${CODESIGN_ALLOWED}" != "YES" ]] && echo "ℹ️  Codesign disabled (CODESIGN_ALLOWED=${CODESIGN_ALLOWED})."
fi
